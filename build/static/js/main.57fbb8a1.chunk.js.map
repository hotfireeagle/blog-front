{"version":3,"sources":["context/reducer.ts","data.interface.ts","context/context.ts","component/articleList/action.ts","util/tool.ts","component/articleList/reducer.ts","component/topicList/action.ts","component/topicList/reducer.ts","context/provider.tsx","util/fetch.ts","component/loadingWrapper/index.tsx","component/articleList/index.tsx","component/topicList/index.tsx","page/articleList/index.tsx","page/articleDetail/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducerObj","initialState","articleList","apiResponse","result","total","loading","topicList","activeTag","defaultAppContext","store","dispatch","AppContext","createContext","prefix","setArticleListResponse","setLoading","getActions","obj","keys","Object","forEach","key","push","actions","reducer","moduleState","action","type","data","setTopicList","setActiveTag","state","newState","moduleName","moduleObj","includes","Provider","props","useReducer","value","AppProvider","children","fetchData","url","method","httpParams","Promise","resolve","reject","toLowerCase","join","obj2str","body","JSON","stringify","headers","fetch","then","res","json","response","status","alert","catch","err","LoadingWrapper","className","style","height","maxHeight","src","ArticleList","context","useContext","topicModuleState","articles","useEffect","tagId","fetchArticle","map","articleObj","id","to","title","date","TopicList","appContext","tagObj","onClick","tagClickHandler","name","ArticleDetail","articleId","useParams","useState","setApiResponse","content","document","querySelectorAll","block","hljs","highlightBlock","dangerouslySetInnerHTML","__html","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.57fbb8a1.chunk.js","sourcesContent":["import { IReducerParam, IAction, IAppState } from '../data.interface'\nimport articleList from '../component/articleList/reducer'\nimport topicList from '../component/topicList/reducer'\n\nconst combineReducers = (reducerObj: IReducerParam) => {\n  return (state: IAppState, action: IAction) => {\n    const newState = { ...state }\n    const moduleNames = Object.keys(reducerObj)\n\n    for (let moduleName of moduleNames) {\n      const moduleObj = reducerObj[moduleName]\n      const { actions, reducer } = moduleObj\n      if (actions.includes(action.type)) { // 被触发的这个action属于当前这个模块\n        newState[moduleName] = reducer(state[moduleName], action)\n        break\n      }\n    }\n    return newState\n  }\n}\n\nexport const reducer = combineReducers({\n  articleList,\n  topicList,\n})","// 每篇文章对象数据的建模\nexport interface IArticle {\n  id: number\n  title: string\n  tags: Array<number>\n  date: string\n}\n\n// 文章标签数据的建模\nexport interface ITopic {\n  id: number\n  name: string\n}\n\n// 后端中api/article/query接口所返回的数据类型建模\nexport interface IArticleQueryResponse {\n  result: Array<IArticle>\n  total: number\n}\n\n// 文章列表模块所维护的状态\nexport interface IModuleArticleList {\n  apiResponse: IArticleQueryResponse\n  loading: boolean\n}\n\n// 分类列表模块所维护的状态\nexport interface IModuleTopicList {\n  apiResponse: Array<ITopic>\n  loading: boolean\n  activeTag: number | null\n}\n\n// 应用context中所维护的数据类型\nexport interface IAppState {\n  articleList: IModuleArticleList\n  topicList: IModuleTopicList\n  [k: string]: any\n}\n\n// 整个应用的初始数据，用在useReducer上面\nexport const initialState: IAppState = {\n  articleList: {\n    apiResponse: { result: [], total: 0 },\n    loading: false,\n  },\n  topicList: {\n    apiResponse: [],\n    loading: false,\n    activeTag: null\n  },\n}\n\nexport interface IAppContext {\n  store: IAppState\n  dispatch: any\n}\n\nexport const defaultAppContext: IAppContext = {\n  store: initialState,\n  dispatch: () => {}\n}\n\nexport interface IReducerParam {\n  [key: string]: any\n}\n\n// 整个应用的action类型\nexport interface IAction {\n  type: string\n  [key: string]: any\n}\n\nexport interface IArticleQuery {\n  page?: number\n  pageSize?: number\n  tagId?: number\n}\n\nexport interface IArticleDetail {\n  id: number\n  title: string\n  content: string\n  date: string\n  tags: Array<ITopic>\n}","import { createContext } from 'react'\nimport { IAppContext, defaultAppContext } from '../data.interface'\n\nconst AppContext = createContext<IAppContext>(defaultAppContext)\n\nexport default AppContext","const prefix = '__component__article__list'\n\nexport const setArticleListResponse = prefix + 'set_article_list_response'\n\nexport const setLoading = prefix + 'set_loading'","interface IObj {\n  [key: string]: any\n}\n\ntype Tobj2str = (obj: IObj) => string\n\ntype IGetActions = (obj: IObj) => Array<string>\n\n/**\n * 把对象转化为字符串的形式进行表示\n * @param obj ： 需要进行转换的对象参数\n */\nexport const obj2str: Tobj2str = (obj: IObj) => {\n  const keys = Object.keys(obj)\n  const result: any[] = []\n  keys.forEach(key => {\n    result.push(`${key}=${obj[key]}`)\n  })\n  return result.join('&')\n}\n\n/**\n * 抽离出action的列表数据\n * @param obj : 需要进行转换的对象参数\n */\nexport const getActions: IGetActions = (obj: IObj) => {\n  const keys = Object.keys(obj)\n  const result: string[] = []\n  keys.forEach(key => {\n    result.push(obj[key])\n  })\n  return result\n}","import * as actions from './action'\nimport { IModuleArticleList, IAction } from '../../data.interface'\nimport { getActions } from '../../util/tool'\n\nconst reducer = (moduleState: IModuleArticleList, action: IAction) => {\n  switch (action.type) {\n    case actions.setArticleListResponse:\n      return { ...moduleState, apiResponse: action.data }\n    case actions.setLoading:\n      return { ...moduleState, loading: action.data }\n    default:\n      return moduleState\n  }\n}\n\nconst obj = {\n  actions: getActions(actions),\n  reducer,\n}\n\nexport default obj","const prefix = '__component__topic__list__'\n\nexport const setTopicList = prefix + 'set__topic__list'\n\nexport const setLoading = prefix + 'set__loading'\n\nexport const setActiveTag = prefix + 'setActive__tag'","import * as actions from './action'\nimport { IModuleTopicList, IAction } from '../../data.interface'\nimport { getActions } from '../../util/tool'\n\nconst reducer = (moduleState: IModuleTopicList, action: IAction) => {\n  switch (action.type) {\n    case actions.setTopicList:\n      return { ...moduleState, apiResponse: action.data }\n    case actions.setLoading:\n      return { ...moduleState, loading: action.data }\n    case actions.setActiveTag:\n      return { ...moduleState, activeTag: action.data }\n    default:\n      return moduleState\n  }\n}\n\nconst obj = {\n  actions: getActions(actions),\n  reducer,\n}\n\nexport default obj","import React, { useReducer } from 'react'\nimport { IAppContext, initialState } from '../data.interface'\nimport AppContext from './context'\nimport { reducer } from './reducer'\n\ninterface IProps {\n  children: any\n}\n\nconst Provider: React.FC<IProps> = props => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const value: IAppContext = {\n    store: state,\n    dispatch,\n  }\n  const AppProvider = AppContext.Provider\n\n  return (\n    <AppProvider value={value}>\n      {props.children}\n    </AppProvider>\n  )\n}\n\nexport default Provider","import { obj2str } from './tool'\n\ntype HttpMethods = 'get' | 'GET' | 'post' | 'POST'\n\ntype FunType = (api: string, method: HttpMethods, data?: any) => Promise<any>\n\ninterface IResponse {\n  status: 1 | 2,\n  data: any,\n  message: string,\n  [key: string]: any\n}\n\n/**\n * 获取数据的工具类方法\n * @param url : 路由名称\n * @param httpParams : 请求参数\n */\nconst fetchData: FunType = (url: string, method: HttpMethods, httpParams?: any) => {\n  return new Promise((resolve, reject) => {\n    let data: any;\n    if (method.toLowerCase() === 'get') {\n      data = { method: 'GET' }\n      httpParams && (url = `${url}?${obj2str(httpParams)}`)\n    } else { // POST类请求\n      data = {\n        method: 'POST',\n        body: JSON.stringify(httpParams),\n        headers: { 'content-type': 'application/json', },\n      }\n    }\n    fetch(url, data).then(res => res.json())\n      .then((response: IResponse) => {\n        if (response.status === 1) {\n          resolve(response.data)\n        } else {\n          alert('出错了')\n        }\n      }).catch(err => {\n        alert('出错了')\n        reject(err)\n      })\n  })\n}\n\nexport default fetchData","import React from 'react'\nimport './index.scss'\n\ninterface IProps {\n  children: any\n  height: number | string\n  loading: boolean\n}\n\nconst LoadingWrapper: React.FC<IProps> = props => {\n  return (\n    <>\n    {\n      props.loading ?\n      <div className='loadingWrapper' style={{ height: props.height }}>\n        <img className='img' style={{ maxHeight: props.height }} src='http://img2.imgtn.bdimg.com/it/u=3381596572,1571513985&fm=214&gp=0.jpg' />\n      </div>\n      :\n      props.children\n    }\n    </>\n  )\n}\n\nexport default LoadingWrapper","import React, { useContext, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { IArticleQuery } from '../../data.interface'\nimport AppContext from '../../context/context'\nimport fetchData from '../../util/fetch'\nimport LoadingWrapper from '../loadingWrapper'\nimport * as actions from './action'\nimport './index.scss'\n\nconst ArticleList: React.FC<any> = () => {\n  const context = useContext(AppContext)\n\n  const moduleState = context.store.articleList // context中所维护的关于自己的状态\n  const topicModuleState = context.store.topicList // context中所维护的关于topicList模块的状态\n  const { dispatch } = context\n\n  const { apiResponse, loading } = moduleState\n  const { activeTag } = topicModuleState\n  const articles = apiResponse && apiResponse.result // 文章列表数据\n\n  // 加载文章的包装方法\n  const fetchArticle = () => {\n    const obj: IArticleQuery = {}\n    if (activeTag) { obj.tagId = activeTag }\n    return fetchData('/api/article/query', 'post', obj)\n  }\n\n  // 设置文章列表数据的effect\n  useEffect(() => {\n    dispatch({ type: actions.setLoading, data: true })\n    fetchArticle().then(res => {\n      dispatch({ type: actions.setArticleListResponse, data: res })\n      dispatch({ type: actions.setLoading, data: false })\n    })\n  }, [activeTag])\n\n  return (\n    <LoadingWrapper\n      loading={loading}\n      height=\"500px\"\n    >\n      <div className='articleListWrapper'>\n        {\n          articles.map(articleObj => (\n            <div className='articleItem' key={articleObj.id}>\n              <Link to={`/articleDetail/${articleObj.id}`} className='title'>{articleObj.title}</Link>\n              <span className='flexg' />\n              <span className='date'>{articleObj.date}</span>\n            </div>\n          ))\n        }\n      </div>\n    </LoadingWrapper>\n  )\n}\n\nexport default ArticleList","import React, { useContext, useEffect} from 'react'\nimport appContext from '../../context/context'\nimport LoadingWrapper from '../loadingWrapper'\nimport * as actions from './action'\nimport fetchData from '../../util/fetch'\nimport './index.scss'\n\nconst TopicList = () => {\n  const context = useContext(appContext)\n\n  const moduleState = context.store.topicList // context中所维护的关于该模块的状态数据\n  const { dispatch } = context\n  const { apiResponse, loading, activeTag } = moduleState\n\n  // 设置加载数据的loading\n  useEffect(() => {\n    dispatch({ type: actions.setLoading, data: true })\n    fetchData('/api/tag/all', 'get').then(res => {\n      dispatch({ type: actions.setTopicList, data: res })\n      dispatch({ type: actions.setLoading, data: false })\n    })\n  }, [])\n\n  // 监听标签的点击事件\n  const tagClickHandler = (id: number) => {\n    dispatch({ type: actions.setActiveTag, data: id })\n  }\n\n  const returnTagClassName = (id: number) => {\n    if (id === activeTag) return 'tagItem activeTagItem'\n    return 'tagItem'\n  }\n\n  return (\n    <LoadingWrapper\n      height={60}\n      loading={loading}\n    >\n      <div className='tagWrapperComponent'>\n        {\n          apiResponse.map(tagObj => (\n            <span\n              key={tagObj.id} className={returnTagClassName(tagObj.id)}\n              onClick={() => tagClickHandler(tagObj.id)}\n            >\n              <span className='tag'>#</span>{tagObj.name}\n            </span>\n          ))\n        }\n      </div>\n    </LoadingWrapper>\n  )\n}\n\nexport default TopicList","import React from 'react'\nimport ArticleListComponent from '../../component/articleList'\nimport TopicListComponent from '../../component/topicList'\nimport './index.scss'\n\nconst ArticleList = () => (\n  <div className='pageContainer'>\n    <h3 className='title'>Topics</h3>\n    <TopicListComponent />\n    <h3 className='title'>Most recent</h3>\n    <ArticleListComponent />\n  </div>\n)\n\nexport default ArticleList","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport fetchData from '../../util/fetch'\nimport { IArticleDetail } from '../../data.interface'\nimport LoadingWrapper from '../../component/loadingWrapper'\n\ninterface IParam {\n  articleId: string\n}\n\nconst ArticleDetail: React.FC<any> = (props) => {\n  const param = useParams<IParam>()\n\n  const { articleId } = param\n  const [loading, setLoading] = useState(true) // 是否处于加载过程\n  const [apiResponse, setApiResponse] = useState<IArticleDetail>({} as IArticleDetail) // 文章详情数据\n\n  // 设置文章数据的effect\n  useEffect(() => {\n    setLoading(true)\n    fetchData(`/api/article/${articleId}`, 'GET').then(res => {\n      setApiResponse(res)\n    })\n    setLoading(false)\n  }, [articleId])\n\n  // 设置代码颜色的effect\n  useEffect(() => {\n    if (!apiResponse.content) return\n    document.querySelectorAll('figure').forEach((block) => {\n      hljs.highlightBlock(block);\n    });\n  }, [apiResponse])\n\n  return (\n    <LoadingWrapper\n      height='100vh'\n      loading={loading}\n    >\n      <div className='pageWrapper'>\n        <div dangerouslySetInnerHTML={{ __html: apiResponse.content }} />\n      </div>\n    </LoadingWrapper>\n  )\n}\n\nexport default ArticleDetail","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Provider from './context/provider'\nimport ArticleList from './page/articleList/index'\nimport ArticleDetail from './page/articleDetail/index'\n\nconst App = () => (\n  <Provider>\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <ArticleList />\n        </Route>\n        <Route path='/articleDetail/:articleId'>\n          <ArticleDetail />\n        </Route>\n      </Switch>\n    </Router>\n  </Provider>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}